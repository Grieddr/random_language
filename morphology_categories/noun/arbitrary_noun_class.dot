digraph arbitrary_noun_class {
	/*
	This is a semantic feature of the noun so I'm proceeding for now with the 
	assumption it wouldn't be marked by itself in inflection.  Maybe I should do otherwise.  
	*/
	graph [odds = 0];
	edge [twoway = 1];
	/* 
	I'm just making the graph a path, so that in products clumps are likely to comprise similar classes.  
	The ordering on the path is as it is so that small numbers are mostly far apart, so that when we retain only small numbers we aren't overlikely to all be the same value.
	*/
	noun_class2 -> noun_class6;
	noun_class6 -> noun_class0;
	noun_class0 -> noun_class4;
	noun_class4 -> noun_class3;
	noun_class3 -> noun_class7;
	noun_class7 -> noun_class1;
	noun_class1 -> noun_class5;
	noun_class2 [necessitates = "[noun_class1]"];
	noun_class2 [uncorrelated_retention = 0.3]; // pretty arbitrary
	noun_class3 [necessitates = "[noun_class1, noun_class2]"];
	noun_class3 [uncorrelated_retention = 0.125];
	noun_class4 [necessitates = "[noun_class1, noun_class2, noun_class3]"];
	noun_class4 [uncorrelated_retention = 0.05];
	noun_class5 [necessitates = "[noun_class1, noun_class2, noun_class3, noun_class4]"];
	noun_class5 [uncorrelated_retention = 0.033333];
	noun_class6 [necessitates = "[noun_class1, noun_class2, noun_class3, noun_class4, noun_class5]"];
	noun_class6 [uncorrelated_retention = 0.023809];
	noun_class7 [necessitates = "[noun_class1, noun_class2, noun_class3, noun_class4, noun_class5, noun_class6]"];
	noun_class7 [uncorrelated_retention = 0.017857];
	/* 
	I've stopped at eight classes just 'cause I have to stop somewhere.
	Maybe a generation system like the ones we envisioned for tense would also do here.
	*/
}
